{"title":"Mysql高级","uid":"c8c70edefb9619563a3fbb2208c96ed5","slug":"Mysql高级","date":"2022-12-22T01:53:26.132Z","updated":"2022-12-22T02:00:40.911Z","comments":true,"path":"api/articles/Mysql高级.json","keywords":null,"cover":"/img/a0.webp","content":"<h2 id=\"mysql高级\"><a href=\"#mysql高级\" class=\"headerlink\" title=\"mysql高级\"></a>mysql高级</h2><p><strong>今日目标</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>掌握约束的使用</p>\n</li>\n<li><p>掌握表关系及建表原则</p>\n</li>\n<li><p>重点掌握多表查询操作</p>\n</li>\n<li><p>掌握事务操作</p>\n</li>\n</ul></blockquote>\n<h2 id=\"1，约束\"><a href=\"#1，约束\" class=\"headerlink\" title=\"1，约束\"></a>1，约束</h2><img src=\"../assets2/image-20210724104749122.png\" alt=\"image-20210724104749122\" style=\"zoom:70%;\" />\n\n<p>上面表中可以看到表中数据存在一些问题：</p>\n<ul>\n<li><p>id 列一般是用标示数据的唯一性的，而上述表中的id为1的有三条数据，并且 <code>马花疼</code> 没有id进行标示</p>\n</li>\n<li><p><code>柳白</code> 这条数据的age列的数据是3000，而人也不可能活到3000岁</p>\n</li>\n<li><p><code>马运</code>  这条数据的math数学成绩是-5，而数学学得再不好也不可能出现负分</p>\n</li>\n<li><p><code>柳青</code> 这条数据的english列（英文成绩）值为null，而成绩即使没考也得是0分</p>\n</li>\n</ul>\n<p>针对上述数据问题，我们就可以从数据库层面在添加数据的时候进行限制，这个就是约束。</p>\n<h3 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1  概念\"></a>1.1  概念</h3><ul>\n<li><p>约束是作用于表中列上的规则，用于限制加入表的数据</p>\n<p>例如：我们可以给id列加约束，让其值不能重复，不能为null值。</p>\n</li>\n<li><p>约束的存在保证了数据库中数据的正确性、有效性和完整性</p>\n<p>添加约束可以在添加数据的时候就限制不正确的数据，年龄是3000，数学成绩是-5分这样无效的数据，继而保障数据的完整性。</p>\n</li>\n</ul>\n<h3 id=\"1-2-分类\"><a href=\"#1-2-分类\" class=\"headerlink\" title=\"1.2  分类\"></a>1.2  分类</h3><ul>\n<li><strong>非空约束： 关键字是 NOT NULL</strong></li>\n</ul>\n<p>  保证列中所有的数据不能有null值。</p>\n<p>  例如：id列在添加 <code>马花疼</code> 这条数据时就不能添加成功。</p>\n<ul>\n<li><p><strong>唯一约束：关键字是  UNIQUE</strong></p>\n<p>保证列中所有数据各不相同。</p>\n<p>例如：id列中三条数据的值都是1，这样的数据在添加时是绝对不允许的。</p>\n</li>\n<li><p><strong>主键约束： 关键字是  PRIMARY KEY</strong></p>\n</li>\n</ul>\n<p>  主键是一行数据的唯一标识，要求非空且唯一。一般我们都会给没张表添加一个主键列用来唯一标识数据。</p>\n<p>  例如：上图表中id就可以作为主键，来标识每条数据。那么这样就要求数据中id的值不能重复，不能为null值。</p>\n<ul>\n<li><p><strong>检查约束： 关键字是  CHECK</strong> </p>\n<p>保证列中的值满足某一条件。</p>\n<p>例如：我们可以给age列添加一个范围，最低年龄可以设置为1，最大年龄就可以设置为300，这样的数据才更合理些。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：MySQL不支持检查约束。</p>\n<p>这样是不是就没办法保证年龄在指定的范围内了？从数据库层面不能保证，以后可以在java代码中进行限制，一样也可以实现要求。</p></blockquote>\n</li>\n<li><p><strong>默认约束： 关键字是   DEFAULT</strong></p>\n<p>保存数据时，未指定值则采用默认值。</p>\n<p>例如：我们在给english列添加该约束，指定默认值是0，这样在添加数据时没有指定具体值时就会采用默认给定的0。</p>\n</li>\n<li><p><strong>外键约束： 关键字是  FOREIGN KEY</strong></p>\n<p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p>\n<p>外键约束现在可能还不太好理解，后面我们会重点进行讲解。</p>\n</li>\n</ul>\n<h3 id=\"1-3-非空约束\"><a href=\"#1-3-非空约束\" class=\"headerlink\" title=\"1.3  非空约束\"></a>1.3  非空约束</h3><ul>\n<li><p>概念</p>\n<p>非空约束用于保证列中所有数据不能有NULL值</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>添加约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建表时添加非空约束\nCREATE TABLE 表名(\n   列名 数据类型 NOT NULL,\n   …\n); \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建完表后添加非空约束\nALTER TABLE 表名 MODIFY 字段名 数据类型 NOT NULL;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>删除约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 MODIFY 字段名 数据类型;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-唯一约束\"><a href=\"#1-4-唯一约束\" class=\"headerlink\" title=\"1.4  唯一约束\"></a>1.4  唯一约束</h3><ul>\n<li><p>概念</p>\n<p>唯一约束用于保证列中所有数据各不相同</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>添加约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建表时添加唯一约束\nCREATE TABLE 表名(\n   列名 数据类型 UNIQUE [AUTO_INCREMENT],\n   -- AUTO_INCREMENT: 当不指定值时自动增长\n   …\n); \nCREATE TABLE 表名(\n   列名 数据类型,\n   …\n   [CONSTRAINT] [约束名称] UNIQUE(列名)\n); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建完表后添加唯一约束\nALTER TABLE 表名 MODIFY 字段名 数据类型 UNIQUE;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>删除约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 DROP INDEX 字段名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-5-主键约束\"><a href=\"#1-5-主键约束\" class=\"headerlink\" title=\"1.5  主键约束\"></a>1.5  主键约束</h3><ul>\n<li><p>概念</p>\n<p>主键是一行数据的唯一标识，要求非空且唯一</p>\n<p>一张表只能有一个主键</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>添加约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建表时添加主键约束\nCREATE TABLE 表名(\n   列名 数据类型 PRIMARY KEY [AUTO_INCREMENT],\n   …\n); \nCREATE TABLE 表名(\n   列名 数据类型,\n   [CONSTRAINT] [约束名称] PRIMARY KEY(列名)\n); \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建完表后添加主键约束\nALTER TABLE 表名 ADD PRIMARY KEY(字段名);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>删除约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 DROP PRIMARY KEY;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-6-默认约束\"><a href=\"#1-6-默认约束\" class=\"headerlink\" title=\"1.6  默认约束\"></a>1.6  默认约束</h3><ul>\n<li><p>概念</p>\n<p>保存数据时，未指定值则采用默认值</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>添加约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建表时添加默认约束\nCREATE TABLE 表名(\n   列名 数据类型 DEFAULT 默认值,\n   …\n); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建完表后添加默认约束\nALTER TABLE 表名 ALTER 列名 SET DEFAULT 默认值;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>删除约束</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 ALTER 列名 DROP DEFAULT;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-7-约束练习\"><a href=\"#1-7-约束练习\" class=\"headerlink\" title=\"1.7  约束练习\"></a>1.7  约束练习</h3><p><strong>根据需求，为表添加合适的约束</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 员工表\nCREATE TABLE emp (\n\tid INT,  -- 员工id，主键且自增长\n    ename VARCHAR(50), -- 员工姓名，非空且唯一\n    joindate DATE,  -- 入职日期，非空\n    salary DOUBLE(7,2),  -- 工资，非空\n    bonus DOUBLE(7,2)  -- 奖金，如果没有将近默认为0\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面一定给出了具体的要求，我们可以根据要求创建这张表，并为每一列添加对应的约束。建表语句如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE IF EXISTS emp;\n\n-- 员工表\nCREATE TABLE emp (\n  id INT PRIMARY KEY, -- 员工id，主键且自增长\n  ename VARCHAR(50) NOT NULL UNIQUE, -- 员工姓名，非空并且唯一\n  joindate DATE NOT NULL , -- 入职日期，非空\n  salary DOUBLE(7,2) NOT NULL , -- 工资，非空\n  bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没有奖金默认为0\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过上面语句可以创建带有约束的 <code>emp</code> 表，约束能不能发挥作用呢。接下来我们一一进行验证，先添加一条没有问题的数据</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>验证主键约束，非空且唯一</strong></li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(null,&#39;张三&#39;,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724114548170.png\" alt=\"image-20210724114548170\" style=\"zoom:80%;\" />\n\n<p>从上面的结果可以看到，字段 <code>id</code> 不能为null。那我们重新添加一条数据，如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724114805350.png\" alt=\"image-20210724114805350\" style=\"zoom:80%;\" />\n\n<p>从上面结果可以看到，1这个值重复了。所以主键约束是用来限制数据非空且唯一的。那我们再添加一条符合要求的数据</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(2,&#39;李四&#39;,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724115024106.png\" alt=\"image-20210724115024106\" style=\"zoom:80%;\" />\n\n<ul>\n<li><strong>验证非空约束</strong></li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(3,null,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724115149415.png\" alt=\"image-20210724115149415\" style=\"zoom:80%;\" />\n\n<p>从上面结果可以看到，<code>ename</code> 字段的非空约束生效了。</p>\n<ul>\n<li><strong>验证唯一约束</strong></li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(3,&#39;李四&#39;,&#39;1999-11-11&#39;,8800,5000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724115336916.png\" alt=\"image-20210724115336916\" style=\"zoom:80%;\" />\n\n<p>从上面结果可以看到，<code>ename</code> 字段的唯一约束生效了。</p>\n<ul>\n<li><strong>验证默认约束</strong></li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary) values(3,&#39;王五&#39;,&#39;1999-11-11&#39;,8800);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行完上面语句后查询表中数据，如下图可以看到王五这条数据的bonus列就有了默认值0。</p>\n<img src=\"../assets2/image-20210724115547951.png\" alt=\"image-20210724115547951\" style=\"zoom:80%;\" />\n\n<p>&#x3D;&#x3D;注意：默认约束只有在不给值时才会采用默认值。如果给了null，那值就是null值。&#x3D;&#x3D;</p>\n<p>如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(id,ename,joindate,salary,bonus) values(4,&#39;赵六&#39;,&#39;1999-11-11&#39;,8800,null);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行完上面语句后查询表中数据，如下图可以看到赵六这条数据的bonus列的值是null。</p>\n<img src=\"../assets2/image-20210724115826516.png\" alt=\"image-20210724115826516\" style=\"zoom:80%;\" />\n\n<ul>\n<li><strong>验证自动增长： auto_increment  当列是数字类型 并且唯一约束</strong></li>\n</ul>\n<p>重新创建 <code>emp</code> 表，并给id列添加自动增长</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 员工表\nCREATE TABLE emp (\n  id INT PRIMARY KEY auto_increment, -- 员工id，主键且自增长\n  ename VARCHAR(50) NOT NULL UNIQUE, -- 员工姓名，非空并且唯一\n  joindate DATE NOT NULL , -- 入职日期，非空\n  salary DOUBLE(7,2) NOT NULL , -- 工资，非空\n  bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没有奖金默认为0\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来给emp添加数据，分别验证不给id列添加值以及给id列添加null值，id列的值会不会自动增长：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO emp(ename,joindate,salary,bonus) values(&#39;赵六&#39;,&#39;1999-11-11&#39;,8800,null);\nINSERT INTO emp(id,ename,joindate,salary,bonus) values(null,&#39;赵六2&#39;,&#39;1999-11-11&#39;,8800,null);\nINSERT INTO emp(id,ename,joindate,salary,bonus) values(null,&#39;赵六3&#39;,&#39;1999-11-11&#39;,8800,null);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1-8-外键约束\"><a href=\"#1-8-外键约束\" class=\"headerlink\" title=\"1.8  外键约束\"></a>1.8  外键约束</h3><h4 id=\"1-8-1-概述\"><a href=\"#1-8-1-概述\" class=\"headerlink\" title=\"1.8.1  概述\"></a>1.8.1  概述</h4><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p>\n<p>如何理解上面的概念呢？如下图有两张表，员工表和部门表：</p>\n<img src=\"../assets2/image-20210724120904180.png\" alt=\"image-20210724120904180\" style=\"zoom:80%;\" />\n\n<p>员工表中的dep_id字段是部门表的id字段关联，也就是说1号学生张三属于1号部门研发部的员工。现在我要删除1号部门，就会出现错误的数据（员工表中属于1号部门的数据）。而我们上面说的两张表的关系只是我们认为它们有关系，此时需要通过外键让这两张表产生数据库层面的关系，这样你要删除部门表中的1号部门的数据将无法删除。</p>\n<h4 id=\"1-8-2-语法\"><a href=\"#1-8-2-语法\" class=\"headerlink\" title=\"1.8.2  语法\"></a>1.8.2  语法</h4><ul>\n<li>添加外键约束</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 创建表时添加外键约束\nCREATE TABLE 表名(\n   列名 数据类型,\n   …\n   [CONSTRAINT] [外键名称] FOREIGN KEY(外键列名) REFERENCES 主表(主表列名) \n); <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 建完表后添加外键约束\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>删除外键约束</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"1-8-3-练习\"><a href=\"#1-8-3-练习\" class=\"headerlink\" title=\"1.8.3  练习\"></a>1.8.3  练习</h4><p>根据上述语法创建员工表和部门表，并添加上外键约束：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 删除表\nDROP TABLE IF EXISTS emp;\nDROP TABLE IF EXISTS dept;\n\n-- 部门表\nCREATE TABLE dept(\n\tid int primary key auto_increment,\n\tdep_name varchar(20),\n\taddr varchar(20)\n);\n-- 员工表 \nCREATE TABLE emp(\n\tid int primary key auto_increment,\n\tname varchar(20),\n\tage int,\n\tdep_id int,\n\n\t-- 添加外键 dep_id,关联 dept 表的id主键\n\tCONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES dept(id)\t\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加数据</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 添加 2 个部门\ninsert into dept(dep_name,addr) values\n(&#39;研发部&#39;,&#39;广州&#39;),(&#39;销售部&#39;, &#39;深圳&#39;);\n\n-- 添加员工,dep_id 表示员工所在的部门\nINSERT INTO emp (NAME, age, dep_id) VALUES \n(&#39;张三&#39;, 20, 1),\n(&#39;李四&#39;, 20, 1),\n(&#39;王五&#39;, 20, 1),\n(&#39;赵六&#39;, 20, 2),\n(&#39;孙七&#39;, 22, 2),\n(&#39;周八&#39;, 18, 2);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时删除 <code>研发部</code> 这条数据，会发现无法删除。</p>\n<p>删除外键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">alter table emp drop FOREIGN key fk_emp_dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>重新添加外键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">alter table emp add CONSTRAINT fk_emp_dept FOREIGN key(dep_id) REFERENCES dept(id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"2，数据库设计\"><a href=\"#2，数据库设计\" class=\"headerlink\" title=\"2，数据库设计\"></a>2，数据库设计</h2><h3 id=\"2-1-数据库设计简介\"><a href=\"#2-1-数据库设计简介\" class=\"headerlink\" title=\"2.1  数据库设计简介\"></a>2.1  数据库设计简介</h3><ul>\n<li><p>软件的研发步骤</p>\n<img src=\"../assets2/image-20210724130925801.png\" alt=\"image-20210724130925801\" style=\"zoom:80%;\" />\n</li>\n<li><p>数据库设计概念</p>\n<ul>\n<li>数据库设计就是根据业务系统的具体需求，结合我们所选用的DBMS，为这个业务系统构造出最优的数据存储模型。</li>\n<li>建立数据库中的&#x3D;&#x3D;表结构&#x3D;&#x3D;以及&#x3D;&#x3D;表与表之间的关联关系&#x3D;&#x3D;的过程。</li>\n<li>有哪些表？表里有哪些字段？表和表之间有什么关系？</li>\n</ul>\n</li>\n<li><p>数据库设计的步骤</p>\n<ul>\n<li><p>需求分析（数据是什么? 数据具有哪些属性? 数据与属性的特点是什么）</p>\n</li>\n<li><p>逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）</p>\n<p>如下图就是ER(Entity&#x2F;Relation)图：</p>\n<img src=\"../assets2/image-20210724131210759.png\" alt=\"image-20210724131210759\" style=\"zoom:80%;\" />\n</li>\n<li><p>物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）</p>\n</li>\n<li><p>维护设计（1.对新的需求进行建表；2.表优化）</p>\n</li>\n</ul>\n</li>\n<li><p>表关系</p>\n<ul>\n<li><p>一对一</p>\n<ul>\n<li>如：用户 和 用户详情</li>\n<li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li>\n</ul>\n<img src=\"../assets2/image-20210724133015129.png\" alt=\"image-20210724133015129\" style=\"zoom:80%;\" />\n\n<p>上图左边是用户的详细信息，而我们真正在展示用户信息时最长用的则是上图右边红框所示，所以我们会将详细信息查分成两周那个表。</p>\n</li>\n<li><p>一对多</p>\n<ul>\n<li><p>如：部门 和 员工</p>\n</li>\n<li><p>一个部门对应多个员工，一个员工对应一个部门。如下图：</p>\n<img src=\"../assets2/image-20210724133443094.png\" alt=\"image-20210724133443094\" style=\"zoom:90%;\" /></li>\n</ul>\n</li>\n<li><p>多对多</p>\n<ul>\n<li><p>如：商品 和 订单</p>\n</li>\n<li><p>一个商品对应多个订单，一个订单包含多个商品。如下图：</p>\n<img src=\"../assets2/image-20210724133704682.png\" alt=\"image-20210724133704682\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-表关系-一对多\"><a href=\"#2-2-表关系-一对多\" class=\"headerlink\" title=\"2.2  表关系(一对多)\"></a>2.2  表关系(一对多)</h3><ul>\n<li><p>一对多</p>\n<ul>\n<li>如：部门 和 员工</li>\n<li>一个部门对应多个员工，一个员工对应一个部门。</li>\n</ul>\n</li>\n<li><p>实现方式</p>\n<p>&#x3D;&#x3D;在多的一方建立外键，指向一的一方的主键&#x3D;&#x3D;</p>\n</li>\n<li><p>案例</p>\n<p>我们还是以 <code>员工表</code> 和 <code>部门表</code> 举例:</p>\n<img src=\"../assets2/image-20210724134145803.png\" alt=\"image-20210724134145803\" style=\"zoom:70%;\" />\n\n<p>经过分析发现，员工表属于多的一方，而部门表属于一的一方，此时我们会在员工表中添加一列（dep_id），指向于部门表的主键（id）：</p>\n<img src=\"../assets2/image-20210724134318685.png\" alt=\"image-20210724134318685\" style=\"zoom:70%;\" />\n\n<p>建表语句如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 删除表\nDROP TABLE IF EXISTS tb_emp;\nDROP TABLE IF EXISTS tb_dept;\n\n-- 部门表\nCREATE TABLE tb_dept(\n\tid int primary key auto_increment,\n\tdep_name varchar(20),\n\taddr varchar(20)\n);\n-- 员工表 \nCREATE TABLE tb_emp(\n\tid int primary key auto_increment,\n\tname varchar(20),\n\tage int,\n\tdep_id int,\n\n\t-- 添加外键 dep_id,关联 dept 表的id主键\n\tCONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES tb_dept(id)\t\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看表结构模型图：</p>\n<img src=\"../assets2/image-20210724140456921.png\" alt=\"image-20210724140456921\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"2-3-表关系-多对多\"><a href=\"#2-3-表关系-多对多\" class=\"headerlink\" title=\"2.3  表关系(多对多)\"></a>2.3  表关系(多对多)</h3><ul>\n<li><p>多对多</p>\n<ul>\n<li>如：商品 和 订单</li>\n<li>一个商品对应多个订单，一个订单包含多个商品</li>\n</ul>\n</li>\n<li><p>实现方式</p>\n<p>&#x3D;&#x3D;建立第三张中间表，中间表至少包含两个外键，分别关联两方主键&#x3D;&#x3D;</p>\n</li>\n<li><p>案例</p>\n<p>我们以 <code>订单表</code> 和 <code>商品表</code> 举例：</p>\n<img src=\"../assets2/image-20210724134735939.png\" alt=\"image-20210724134735939\" style=\"zoom:70%;\" />\n\n<p>经过分析发现，订单表和商品表都属于多的一方，此时需要创建一个中间表，在中间表中添加订单表的外键和商品表的外键指向两张表的主键：</p>\n<img src=\"../assets2/image-20210724135054834.png\" alt=\"image-20210724135054834\" style=\"zoom:70%;\" />\n\n<p>建表语句如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 删除表\nDROP TABLE IF EXISTS tb_order_goods;\nDROP TABLE IF EXISTS tb_order;\nDROP TABLE IF EXISTS tb_goods;\n\n-- 订单表\nCREATE TABLE tb_order(\n\tid int primary key auto_increment,\n\tpayment double(10,2),\n\tpayment_type TINYINT,\n\tstatus TINYINT\n);\n\n-- 商品表\nCREATE TABLE tb_goods(\n\tid int primary key auto_increment,\n\ttitle varchar(100),\n\tprice double(10,2)\n);\n\n-- 订单商品中间表\nCREATE TABLE tb_order_goods(\n\tid int primary key auto_increment,\n\torder_id int,\n\tgoods_id int,\n\tcount int\n);\n\n-- 建完表后，添加外键\nalter table tb_order_goods add CONSTRAINT fk_order_id FOREIGN key(order_id) REFERENCES tb_order(id);\nalter table tb_order_goods add CONSTRAINT fk_goods_id FOREIGN key(goods_id) REFERENCES tb_goods(id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看表结构模型图：</p>\n<img src=\"../assets2/image-20210724140307910.png\" alt=\"image-20210724140307910\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"2-4-表关系-一对一\"><a href=\"#2-4-表关系-一对一\" class=\"headerlink\" title=\"2.4  表关系(一对一)\"></a>2.4  表关系(一对一)</h3><ul>\n<li><p>一对一</p>\n<ul>\n<li>如：用户 和 用户详情</li>\n<li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li>\n</ul>\n</li>\n<li><p>实现方式</p>\n<p>&#x3D;&#x3D;在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)&#x3D;&#x3D;</p>\n</li>\n<li><p>案例</p>\n<p>我们以 <code>用户表</code> 举例：</p>\n<img src=\"../assets2/image-20210724135346913.png\" alt=\"image-20210724135346913\" style=\"zoom:70%;\" />\n\n<p>而在真正使用过程中发现 id、photo、nickname、age、gender 字段比较常用，此时就可以将这张表查分成两张表。</p>\n</li>\n</ul>\n<p>​\t<img src=\"../assets2/image-20210724135649341.png\" alt=\"image-20210724135649341\" style=\"zoom:70%;\" /></p>\n<p>​\t</p>\n<p>​\t建表语句如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">create table tb_user_desc (\n\tid int primary key auto_increment,\n\tcity varchar(20),\n\tedu varchar(10),\n\tincome int,\n\tstatus char(2),\n\tdes varchar(100)\n);\n\ncreate table tb_user (\n\tid int primary key auto_increment,\n\tphoto varchar(100),\n\tnickname varchar(50),\n\tage int,\n\tgender char(1),\n\tdesc_id int unique,\n\t-- 添加外键\n\tCONSTRAINT fk_user_desc FOREIGN KEY(desc_id) REFERENCES tb_user_desc(id)\t\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​\t查看表结构模型图：</p>\n<img src=\"../assets2/image-20210724141445785.png\" alt=\"image-20210724141445785\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"2-5-数据库设计案例\"><a href=\"#2-5-数据库设计案例\" class=\"headerlink\" title=\"2.5  数据库设计案例\"></a>2.5  数据库设计案例</h3><p>根据下图设计表及表和表之间的关系：</p>\n<img src=\"../assets2/image-20210724141822204.png\" alt=\"image-20210724141822204\" style=\"zoom:80%;\" />\n\n<p>经过分析，我们分为 <code>专辑表</code>  <code>曲目表</code>  <code>短评表</code>  <code>用户表</code>   4张表。</p>\n<img src=\"../assets2/image-20210724141550446.png\" alt=\"image-20210724141550446\" style=\"zoom:80%;\" />\n\n<p>一个专辑可以有多个曲目，一个曲目只能属于某一张专辑，所以专辑表和曲目表的关系是&#x3D;&#x3D;一对多&#x3D;&#x3D;。</p>\n<p>一个专辑可以被多个用户进行评论，一个用户可以对多个专辑进行评论，所以专辑表和用户表的关系是 &#x3D;&#x3D;多对多&#x3D;&#x3D;。</p>\n<p>一个用户可以发多个短评，一个短评只能是某一个人发的，所以用户表和短评表的关系是 &#x3D;&#x3D;一对多&#x3D;&#x3D;。</p>\n<img src=\"../assets2/image-20210724142550839.png\" alt=\"image-20210724142550839\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"3，多表查询\"><a href=\"#3，多表查询\" class=\"headerlink\" title=\"3，多表查询\"></a>3，多表查询</h2><p>多表查询顾名思义就是从多张表中一次性的查询出我们想要的数据。我们通过具体的sql给他们演示，先准备环境</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE IF EXISTS emp;\nDROP TABLE IF EXISTS dept;\n\n\n# 创建部门表\n\tCREATE TABLE dept(\n        did INT PRIMARY KEY AUTO_INCREMENT,\n        dname VARCHAR(20)\n    );\n\n\t# 创建员工表\n\tCREATE TABLE emp (\n        id INT PRIMARY KEY AUTO_INCREMENT,\n        NAME VARCHAR(10),\n        gender CHAR(1), -- 性别\n        salary DOUBLE, -- 工资\n        join_date DATE, -- 入职日期\n        dep_id INT,\n        FOREIGN KEY (dep_id) REFERENCES dept(did) -- 外键，关联部门表(部门表的主键)\n    );\n\t-- 添加部门数据\n\tINSERT INTO dept (dNAME) VALUES (&#39;研发部&#39;),(&#39;市场部&#39;),(&#39;财务部&#39;),(&#39;销售部&#39;);\n\t-- 添加员工数据\n\tINSERT INTO emp(NAME,gender,salary,join_date,dep_id) VALUES\n\t(&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1),\n\t(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2),\n\t(&#39;唐僧&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2),\n\t(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3),\n\t(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1),\n\t(&#39;小白龙&#39;,&#39;男&#39;,2500,&#39;2011-02-14&#39;,null);\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行下面的多表查询语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp , dept;  -- 从emp和dept表中查询所有的字段数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下：</p>\n<img src=\"../assets2/image-20210724173630506.png\" alt=\"image-20210724173630506\" style=\"zoom:90%;\" />\n\n<p>从上面的结果我们看到有一些无效的数据，如 <code>孙悟空</code> 这个员工属于1号部门，但也同时关联的2、3、4号部门。所以我们要通过限制员工表中的 <code>dep_id</code> 字段的值和部门表 <code>did</code> 字段的值相等来消除这些无效的数据，</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp , dept where emp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行后结果如下：</p>\n<img src=\"../assets2/image-20210724174212443.png\" alt=\"image-20210724174212443\" style=\"zoom:90%;\" />\n\n<p>上面语句就是连接查询，那么多表查询都有哪些呢？</p>\n<ul>\n<li><p>连接查询</p>\n<img src=\"../assets2/image-20210724174717647.png\" alt=\"image-20210724174717647\" style=\"zoom:80%;\" /> \n\n<ul>\n<li>内连接查询 ：相当于查询AB交集数据</li>\n<li>外连接查询<ul>\n<li>左外连接查询 ：相当于查询A表所有数据和交集部门数据</li>\n<li>右外连接查询 ： 相当于查询B表所有数据和交集部分数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>子查询</p>\n</li>\n</ul>\n<h3 id=\"3-1-内连接查询\"><a href=\"#3-1-内连接查询\" class=\"headerlink\" title=\"3.1  内连接查询\"></a>3.1  内连接查询</h3><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 隐式内连接\nSELECT 字段列表 FROM 表1,表2… WHERE 条件;\n\n-- 显示内连接\nSELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内连接相当于查询 A B 交集数据</p></blockquote>\n<img src=\"../assets2/image-20210724174717647.png\" alt=\"image-20210724174717647\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>案例</p>\n<ul>\n<li><p>隐式内连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT\n\t*\nFROM\n\temp,\n\tdept\nWHERE\n\temp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行上述语句结果如下：</p>\n<img src=\"../assets2/image-20210724175344508.png\" alt=\"image-20210724175344508\" style=\"zoom:80%;\" />\n</li>\n<li><p>查询 emp的 name， gender，dept表的dname</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT\n\temp. NAME,\n\temp.gender,\n\tdept.dname\nFROM\n\temp,\n\tdept\nWHERE\n\temp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行语句结果如下：</p>\n<img src=\"../assets2/image-20210724175518159.png\" alt=\"image-20210724175518159\" style=\"zoom:80%;\" />\n\n<p>上面语句中使用表名指定字段所属有点麻烦，sql也支持给表指别名，上述语句可以改进为</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT\n\tt1. NAME,\n\tt1.gender,\n\tt2.dname\nFROM\n\temp t1,\n\tdept t2\nWHERE\n\tt1.dep_id &#x3D; t2.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>显式内连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp inner join dept on emp.dep_id &#x3D; dept.did;\n-- 上面语句中的inner可以省略，可以书写为如下语句\nselect * from emp  join dept on emp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果如下：</p>\n<img src=\"../assets2/image-20210724180103531.png\" alt=\"image-20210724180103531\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-外连接查询\"><a href=\"#3-2-外连接查询\" class=\"headerlink\" title=\"3.2  外连接查询\"></a>3.2  外连接查询</h3><ul>\n<li><p>语法</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 左外连接\nSELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;\n\n-- 右外连接\nSELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>左外连接：相当于查询A表所有数据和交集部分数据</p>\n<p>右外连接：相当于查询B表所有数据和交集部分数据</p></blockquote>\n<img src=\"../assets2/image-20210724174717647.png\" alt=\"image-20210724174717647\" style=\"zoom:80%;\" />\n</li>\n<li><p>案例</p>\n<ul>\n<li><p>查询emp表所有数据和对应的部门信息（左外连接）</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp left join dept on emp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行语句结果如下：</p>\n<img src=\"../assets2/image-20210724180542757.png\" alt=\"image-20210724180542757\" style=\"zoom:80%;\" />\n\n<p>结果显示查询到了左表（emp）中所有的数据及两张表能关联的数据。</p>\n</li>\n<li><p>查询dept表所有数据和对应的员工信息（右外连接）</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp right join dept on emp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行语句结果如下：</p>\n<img src=\"../assets2/image-20210724180613494.png\" alt=\"image-20210724180613494\" style=\"zoom:80%;\" />\n\n<p>结果显示查询到了右表（dept）中所有的数据及两张表能关联的数据。</p>\n<p>要查询出部门表中所有的数据，也可以通过左外连接实现，只需要将两个表的位置进行互换：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from dept left join emp on emp.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-子查询\"><a href=\"#3-3-子查询\" class=\"headerlink\" title=\"3.3  子查询\"></a>3.3  子查询</h3><ul>\n<li><p>概念</p>\n<p>&#x3D;&#x3D;查询中嵌套查询，称嵌套查询为子查询。&#x3D;&#x3D;</p>\n<p>什么是查询中嵌套查询呢？我们通过一个例子来看：</p>\n<p><strong>需求：查询工资高于猪八戒的员工信息。</strong></p>\n<p>来实现这个需求，我们就可以通过二步实现，第一步：先查询出来 猪八戒的工资</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select salary from emp where name &#x3D; &#39;猪八戒&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 第二步：查询工资高于猪八戒的员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp where salary &gt; 3600;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二步中的3600可以通过第一步的sql查询出来，所以将3600用第一步的sql语句进行替换</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from emp where salary &gt; (select salary from emp where name &#x3D; &#39;猪八戒&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这就是查询语句中嵌套查询语句。</p>\n</li>\n<li><p>子查询根据查询结果不同，作用不同</p>\n<ul>\n<li>子查询语句结果是单行单列，子查询语句作为条件值，使用 &#x3D;  !&#x3D;  &gt;  &lt;  等进行条件判断</li>\n<li>子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断</li>\n<li>子查询语句结果是多行多列，子查询语句作为虚拟表</li>\n</ul>\n</li>\n<li><p>案例</p>\n<ul>\n<li><p>查询 ‘财务部’ 和 ‘市场部’ 所有的员工信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 查询 &#39;财务部&#39; 或者 &#39;市场部&#39; 所有的员工的部门did\nselect did from dept where dname &#x3D; &#39;财务部&#39; or dname &#x3D; &#39;市场部&#39;;\n\nselect * from emp where dep_id in (select did from dept where dname &#x3D; &#39;财务部&#39; or dname &#x3D; &#39;市场部&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查询入职日期是 ‘2011-11-11’ 之后的员工信息和部门信息</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 查询入职日期是 &#39;2011-11-11&#39; 之后的员工信息\nselect * from emp where join_date &gt; &#39;2011-11-11&#39; ;\n-- 将上面语句的结果作为虚拟表和dept表进行内连接查询\nselect * from (select * from emp where join_date &gt; &#39;2011-11-11&#39; ) t1, dept where t1.dep_id &#x3D; dept.did;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-案例\"><a href=\"#3-4-案例\" class=\"headerlink\" title=\"3.4  案例\"></a>3.4  案例</h3><ul>\n<li>环境准备：</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE IF EXISTS emp;\nDROP TABLE IF EXISTS dept;\nDROP TABLE IF EXISTS job;\nDROP TABLE IF EXISTS salarygrade;\n\n-- 部门表\nCREATE TABLE dept (\n  did INT PRIMARY KEY PRIMARY KEY, -- 部门id\n  dname VARCHAR(50), -- 部门名称\n  loc VARCHAR(50) -- 部门所在地\n);\n\n-- 职务表，职务名称，职务描述\nCREATE TABLE job (\n  id INT PRIMARY KEY,\n  jname VARCHAR(20),\n  description VARCHAR(50)\n);\n\n-- 员工表\nCREATE TABLE emp (\n  id INT PRIMARY KEY, -- 员工id\n  ename VARCHAR(50), -- 员工姓名\n  job_id INT, -- 职务id\n  mgr INT , -- 上级领导\n  joindate DATE, -- 入职日期\n  salary DECIMAL(7,2), -- 工资\n  bonus DECIMAL(7,2), -- 奖金\n  dept_id INT, -- 所在部门编号\n  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),\n  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)\n);\n-- 工资等级表\nCREATE TABLE salarygrade (\n  grade INT PRIMARY KEY,   -- 级别\n  losalary INT,  -- 最低工资\n  hisalary INT -- 最高工资\n);\n\t\t\t\t\n-- 添加4个部门\nINSERT INTO dept(did,dname,loc) VALUES \n(10,&#39;教研部&#39;,&#39;北京&#39;),\n(20,&#39;学工部&#39;,&#39;上海&#39;),\n(30,&#39;销售部&#39;,&#39;广州&#39;),\n(40,&#39;财务部&#39;,&#39;深圳&#39;);\n\n-- 添加4个职务\nINSERT INTO job (id, jname, description) VALUES\n(1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39;),\n(2, &#39;经理&#39;, &#39;管理部门员工&#39;),\n(3, &#39;销售员&#39;, &#39;向客人推销产品&#39;),\n(4, &#39;文员&#39;, &#39;使用办公软件&#39;);\n\n\n-- 添加员工\nINSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES \n(1001,&#39;孙悟空&#39;,4,1004,&#39;2000-12-17&#39;,&#39;8000.00&#39;,NULL,20),\n(1002,&#39;卢俊义&#39;,3,1006,&#39;2001-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30),\n(1003,&#39;林冲&#39;,3,1006,&#39;2001-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30),\n(1004,&#39;唐僧&#39;,2,1009,&#39;2001-04-02&#39;,&#39;29750.00&#39;,NULL,20),\n(1005,&#39;李逵&#39;,4,1006,&#39;2001-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30),\n(1006,&#39;宋江&#39;,2,1009,&#39;2001-05-01&#39;,&#39;28500.00&#39;,NULL,30),\n(1007,&#39;刘备&#39;,2,1009,&#39;2001-09-01&#39;,&#39;24500.00&#39;,NULL,10),\n(1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20),\n(1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-11-17&#39;,&#39;50000.00&#39;,NULL,10),\n(1010,&#39;吴用&#39;,3,1006,&#39;2001-09-08&#39;,&#39;15000.00&#39;,&#39;0.00&#39;,30),\n(1011,&#39;沙僧&#39;,4,1004,&#39;2007-05-23&#39;,&#39;11000.00&#39;,NULL,20),\n(1012,&#39;李逵&#39;,4,1006,&#39;2001-12-03&#39;,&#39;9500.00&#39;,NULL,30),\n(1013,&#39;小白龙&#39;,4,1004,&#39;2001-12-03&#39;,&#39;30000.00&#39;,NULL,20),\n(1014,&#39;关羽&#39;,4,1007,&#39;2002-01-23&#39;,&#39;13000.00&#39;,NULL,10);\n\n\n-- 添加5个工资等级\nINSERT INTO salarygrade(grade,losalary,hisalary) VALUES \n(1,7000,12000),\n(2,12010,14000),\n(3,14010,20000),\n(4,20010,30000),\n(5,30010,99990);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>需求</p>\n<ol>\n<li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\n\t分析：\n\t\t1. 员工编号，员工姓名，工资 信息在emp 员工表中\n\t\t2. 职务名称，职务描述 信息在 job 职务表中\n\t\t3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id &#x3D; job.id\n*&#x2F;\n-- 方式一 ：隐式内连接\nSELECT\n\temp.id,\n\temp.ename,\n\temp.salary,\n\tjob.jname,\n\tjob.description\nFROM\n\temp,\n\tjob\nWHERE\n\temp.job_id &#x3D; job.id;\n\n-- 方式二 ：显式内连接\nSELECT\n\temp.id,\n\temp.ename,\n\temp.salary,\n\tjob.jname,\n\tjob.description\nFROM\n\temp\nINNER JOIN job ON emp.job_id &#x3D; job.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\n\t分析：\n\t\t1. 员工编号，员工姓名，工资 信息在emp 员工表中\n\t\t2. 职务名称，职务描述 信息在 job 职务表中\n\t\t3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id &#x3D; job.id\n\n\t\t4. 部门名称，部门位置 来自于 部门表 dept\n\t\t5. dept 和 emp 一对多关系 dept.id &#x3D; emp.dept_id\n*&#x2F;\n\n-- 方式一 ：隐式内连接\nSELECT\n\temp.id,\n\temp.ename,\n\temp.salary,\n\tjob.jname,\n\tjob.description,\n\tdept.dname,\n\tdept.loc\nFROM\n\temp,\n\tjob,\n\tdept\nWHERE\n\temp.job_id &#x3D; job.id\n\tand dept.id &#x3D; emp.dept_id\n;\n\n-- 方式二 ：显式内连接\nSELECT\n\temp.id,\n\temp.ename,\n\temp.salary,\n\tjob.jname,\n\tjob.description,\n\tdept.dname,\n\tdept.loc\nFROM\n\temp\nINNER JOIN job ON emp.job_id &#x3D; job.id\nINNER JOIN dept ON dept.id &#x3D; emp.dept_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查询员工姓名，工资，工资等级</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\n\t分析：\n\t\t1. 员工姓名，工资 信息在emp 员工表中\n\t\t2. 工资等级 信息在 salarygrade 工资等级表中\n\t\t3. emp.salary &gt;&#x3D; salarygrade.losalary  and emp.salary &lt;&#x3D; salarygrade.hisalary\n*&#x2F;\nSELECT\n\temp.ename,\n\temp.salary,\n\tt2.*\nFROM\n\temp,\n\tsalarygrade t2\nWHERE\n\temp.salary &gt;&#x3D; t2.losalary\nAND emp.salary &lt;&#x3D; t2.hisalary<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\n\t分析：\n\t\t1. 员工编号，员工姓名，工资 信息在emp 员工表中\n\t\t2. 职务名称，职务描述 信息在 job 职务表中\n\t\t3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id &#x3D; job.id\n\n\t\t4. 部门名称，部门位置 来自于 部门表 dept\n\t\t5. dept 和 emp 一对多关系 dept.id &#x3D; emp.dept_id\n\t\t6. 工资等级 信息在 salarygrade 工资等级表中\n\t\t7. emp.salary &gt;&#x3D; salarygrade.losalary  and emp.salary &lt;&#x3D; salarygrade.hisalary\n*&#x2F;\nSELECT\n\temp.id,\n\temp.ename,\n\temp.salary,\n\tjob.jname,\n\tjob.description,\n\tdept.dname,\n\tdept.loc,\n\tt2.grade\nFROM\n\temp\nINNER JOIN job ON emp.job_id &#x3D; job.id\nINNER JOIN dept ON dept.id &#x3D; emp.dept_id\nINNER JOIN salarygrade t2 ON emp.salary BETWEEN t2.losalary and t2.hisalary;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查询出部门编号、部门名称、部门位置、部门人数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#x2F;*\n\t分析：\n\t\t1. 部门编号、部门名称、部门位置 来自于部门 dept 表\n\t\t2. 部门人数: 在emp表中 按照dept_id 进行分组，然后count(*)统计数量\n\t\t3. 使用子查询，让部门表和分组后的表进行内连接\n*&#x2F;\n-- 根据部门id分组查询每一个部门id和员工数\nselect dept_id, count(*) from emp group by dept_id;\n\nSELECT\n\tdept.id,\n\tdept.dname,\n\tdept.loc,\n\tt1.count\nFROM\n\tdept,\n\t(\n\t\tSELECT\n\t\t\tdept_id,\n\t\t\tcount(*) count\n\t\tFROM\n\t\t\temp\n\t\tGROUP BY\n\t\t\tdept_id\n\t) t1\nWHERE\n\tdept.id &#x3D; t1.dept_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"4，事务\"><a href=\"#4，事务\" class=\"headerlink\" title=\"4，事务\"></a>4，事务</h2><h3 id=\"4-1-概述\"><a href=\"#4-1-概述\" class=\"headerlink\" title=\"4.1  概述\"></a>4.1  概述</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了&#x3D;&#x3D;一组数据库操作命令&#x3D;&#x3D;。</p>\n<p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令&#x3D;&#x3D;要么同时成功，要么同时失败&#x3D;&#x3D;。</p>\n<p>事务是一个不可分割的工作逻辑单元。</p></blockquote>\n<p>这些概念不好理解，接下来举例说明，如下图有一张表</p>\n<img src=\"../assets2/image-20210724224955876.png\" alt=\"image-20210724224955876\" style=\"zoom:80%;\" />\n\n<p>张三和李四账户中各有100块钱，现李四需要转换500块钱给张三，具体的转账操作为</p>\n<ul>\n<li>第一步：查询李四账户余额</li>\n<li>第二步：从李四账户金额 -500</li>\n<li>第三步：给张三账户金额 +500</li>\n</ul>\n<p>现在假设在转账过程中第二步完成后出现了异常第三步没有执行，就会造成李四账户金额少了500，而张三金额并没有多500；这样的系统是有问题的。如果解决呢？使用事务可以解决上述问题</p>\n<img src=\"../assets2/image-20210724225537533.png\" alt=\"image-20210724225537533\" style=\"zoom:70%;\" />\n\n<p>从上图可以看到在转账前开启事务，如果出现了异常回滚事务，三步正常执行就提交事务，这样就可以完美解决问题。</p>\n<h3 id=\"4-2-语法\"><a href=\"#4-2-语法\" class=\"headerlink\" title=\"4.2  语法\"></a>4.2  语法</h3><ul>\n<li><p>开启事务</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">START TRANSACTION;\n或者  \nBEGIN;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>提交事务</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">commit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>回滚事务</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">rollback;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-3-代码验证\"><a href=\"#4-3-代码验证\" class=\"headerlink\" title=\"4.3  代码验证\"></a>4.3  代码验证</h3><ul>\n<li><p>环境准备</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE IF EXISTS account;\n\n-- 创建账户表\nCREATE TABLE account(\n\tid int PRIMARY KEY auto_increment,\n\tname varchar(10),\n\tmoney double(10,2)\n);\n\n-- 添加数据\nINSERT INTO account(name,money) values(&#39;张三&#39;,1000),(&#39;李四&#39;,1000);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>不加事务演示问题</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 转账操作\n-- 1. 查询李四账户金额是否大于500\n\n-- 2. 李四账户 -500\nUPDATE account set money &#x3D; money - 500 where name &#x3D; &#39;李四&#39;;\n\n出现异常了...  -- 此处不是注释，在整体执行时会出问题，后面的sql则不执行\n-- 3. 张三账户 +500\nUPDATE account set money &#x3D; money + 500 where name &#x3D; &#39;张三&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>整体执行结果肯定会出问题，我们查询账户表中数据，发现李四账户少了500。</p>\n<img src=\"../assets2/image-20210724230250263.png\" alt=\"image-20210724230250263\" style=\"zoom:90%;\" />\n</li>\n<li><p>添加事务sql如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 开启事务\nBEGIN;\n-- 转账操作\n-- 1. 查询李四账户金额是否大于500\n\n-- 2. 李四账户 -500\nUPDATE account set money &#x3D; money - 500 where name &#x3D; &#39;李四&#39;;\n\n出现异常了...  -- 此处不是注释，在整体执行时会出问题，后面的sql则不执行\n-- 3. 张三账户 +500\nUPDATE account set money &#x3D; money + 500 where name &#x3D; &#39;张三&#39;;\n\n-- 提交事务\nCOMMIT;\n\n-- 回滚事务\nROLLBACK;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面sql中的执行成功进选择执行提交事务，而出现问题则执行回滚事务的语句。以后我们肯定不可能这样操作，而是在java中进行操作，在java中可以抓取异常，没出现异常提交事务，出现异常回滚事务。</p>\n</li>\n</ul>\n<h3 id=\"4-4-事务的四大特征\"><a href=\"#4-4-事务的四大特征\" class=\"headerlink\" title=\"4.4  事务的四大特征\"></a>4.4  事务的四大特征</h3><ul>\n<li><p>原子性（Atomicity）: 事务是不可分割的最小操作单位，要么同时成功，要么同时失败</p>\n</li>\n<li><p>一致性（Consistency） :事务完成时，必须使所有的数据都保持一致状态</p>\n</li>\n<li><p>隔离性（Isolation） :多个事务之间，操作的可见性</p>\n</li>\n<li><p>持久性（Durability） :事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&#x3D;&#x3D;说明：&#x3D;&#x3D;</p>\n<p>mysql中事务是自动提交的。</p>\n<p>也就是说我们不添加事务执行sql语句，语句执行完毕会自动的提交事务。</p>\n<p>可以通过下面语句查询默认提交方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">SELECT @@autocommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查询到的结果是1 则表示自动提交，结果是0表示手动提交。当然也可以通过下面语句修改提交方式</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">set @@autocommit &#x3D; 0;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></blockquote>\n","text":"mysql高级今日目标 掌握约束的使用 掌握表关系及建表原则 重点掌握多表查询操作 掌握事务操作 1，约束 上面表中可以看到表中数据存在一些问题： id 列一般是用标示数据的唯一性的，而上述表中的id为1的有三条数据，并且 马花疼 没有id进行标示 柳白 这条数据的age列的数据...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":2,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql高级","slug":"Mysql高级","count":1,"path":"api/tags/Mysql高级.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mysql%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">mysql高级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%EF%BC%8C%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1，约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.1  概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.2  分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.3  非空约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.4  唯一约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.5  主键约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-%E9%BB%98%E8%AE%A4%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.6  默认约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-%E7%BA%A6%E6%9D%9F%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">1.7  约束练习</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-8-%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">1.8  外键约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-8-1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.8.1  概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-8-2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.8.2  语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-8-3-%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">1.8.3  练习</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2，数据库设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">2.1  数据库设计简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%A1%A8%E5%85%B3%E7%B3%BB-%E4%B8%80%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">2.2  表关系(一对多)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E8%A1%A8%E5%85%B3%E7%B3%BB-%E5%A4%9A%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">2.3  表关系(多对多)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E8%A1%A8%E5%85%B3%E7%B3%BB-%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">2.4  表关系(一对一)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">2.5  数据库设计案例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%EF%BC%8C%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3，多表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%86%85%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.1  内连接查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%A4%96%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.2  外连接查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%AD%90%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.3  子查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3.4  案例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%EF%BC%8C%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">4，事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">4.1  概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4.2  语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E4%BB%A3%E7%A0%81%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">4.3  代码验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">4.4  事务的四大特征</span></a></li></ol></li></ol>","author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}},"mapped":true,"prev_post":{"title":"Python GDP动态柱状图开发","uid":"d7beb722263ecc7b27e64008947473be","slug":"python GDP动态柱状图开发","date":"2022-12-22T01:56:16.165Z","updated":"2022-12-22T02:02:54.568Z","comments":true,"path":"api/articles/python GDP动态柱状图开发.json","keywords":null,"cover":"/img/a3.jpeg","text":"&quot;&quot;&quot; GDP动态柱状图开发 &quot;&quot;&quot; from pyecharts.charts import Bar, Timeline from pyecharts.options import * from pyecharts.g...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"Python GDP动态柱状图开发","slug":"Python-GDP动态柱状图开发","count":1,"path":"api/tags/Python-GDP动态柱状图开发.json"}],"author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}},"feature":true},"next_post":{"title":"Python爬虫","uid":"33e145189cb2c9be32b78fb749fd41d4","slug":"python爬虫","date":"2022-12-10T10:09:28.936Z","updated":"2022-12-13T14:54:45.609Z","comments":true,"path":"api/articles/python爬虫.json","keywords":null,"cover":"/img/a0.webp","text":"import requests from bs4 import BeautifulSoup import re import json from tqdm import tqdm class CoronaVirusSpider(object): def __init__(self...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"Python爬虫","slug":"Python爬虫","count":1,"path":"api/tags/Python爬虫.json"}],"author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}}}}