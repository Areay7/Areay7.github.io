{"title":"Git使用教程","uid":"ee96819a780f88d504f4858a1dcc7bad","slug":"Git教程","date":"2022-12-08T15:59:32.357Z","updated":"2022-12-22T02:41:05.450Z","comments":true,"path":"api/articles/Git教程.json","keywords":null,"cover":"/img/a6.jpeg","content":"<img src=\"../assets1/gitlogo.png\"/>\n\n<hr/>\n# git 教程\n\n<p>[TOC]</p>\n<h1 id=\"1-版本管理工具概念\"><a href=\"#1-版本管理工具概念\" class=\"headerlink\" title=\"1.版本管理工具概念\"></a>1.版本管理工具概念</h1><p>碰到过如下的现象</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;&lt;毕业论文第一版.doc&gt;&gt;\n&lt;&lt;毕业论文第二版.doc&gt;&gt;\n&lt;&lt;毕业论文第三版.doc&gt;&gt;\n&lt;&lt;毕业论文最终版.doc&gt;&gt;\n&lt;&lt;毕业论文最终版2.doc&gt;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类似的问题我曾经也碰到过很多,例如:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">领导让写文档,写好了,领导让修改,改好了,领导觉得第一版不错,改回来吧,此时内心一脸懵,第一版长啥样没存档啊<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>实际上,代码开发中也需要这样的软件来管理我们的代码. 例如我们经常会碰到如下的现象:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">改之前好好的,改完就报错了,也没怎么修改啊<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在这种情况下如果不能查看修改之前的代码,查找问题是非常困难的.</p>\n<p>如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具</p>\n<p>版本管理工具一般具有如下特性:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 能够记录历史版本,回退历史版本\n2) 团队开发,方便代码合并<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"2-版本管理工具介绍\"><a href=\"#2-版本管理工具介绍\" class=\"headerlink\" title=\"2. 版本管理工具介绍\"></a>2. 版本管理工具介绍</h1><p>现在比较流行的版本管理工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn</p>\n<h2 id=\"2-1版本管理发展简史-维基百科\"><a href=\"#2-1版本管理发展简史-维基百科\" class=\"headerlink\" title=\"2.1版本管理发展简史(维基百科)\"></a>2.1版本管理发展简史(维基百科)</h2><p><img src=\"/../assets1/1571983065236.png\" alt=\"1571983065236\"> </p>\n<h3 id=\"2-1-1-SVN-SubVersion\"><a href=\"#2-1-1-SVN-SubVersion\" class=\"headerlink\" title=\"2.1.1 SVN(SubVersion)\"></a>2.1.1 SVN(SubVersion)</h3><p>工作流程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SVN是集中式版本控制系统，版本库是集中放在中央服务器的.\n工作流程如下:\n\t1.从中央服务器远程仓库下载代码\n\t2.修改后将代码提交到中央服务器远程仓库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>优缺点:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">优点: 简单,易操作\n缺点:所有代码必须放在中央服务器  \n \t   1.服务器一旦宕机无法提交代码,即容错性较差\n      2.离线无法提交代码,无法及时记录我们的提交行为<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>svn流程图</p>\n<p><img src=\"/../assets1/svn.jpg\"></p>\n<h3 id=\"2-1-2-Git\"><a href=\"#2-1-2-Git\" class=\"headerlink\" title=\"2.1.2 Git\"></a>2.1.2 Git</h3><p>工作流程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库：\n本地仓库和远程仓库\n工作流程如下\n    1．从远程仓库中克隆或拉取代码到本地仓库(clone&#x2F;pull)\n    2．从本地进行代码修改\n    3．在提交前先将代码提交到暂存区\n    4．提交到本地仓库。本地仓库中保存修改的各个历史版本\n    5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/git.png\"></p>\n<p>总结:git和svn的区别</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. svn 是集中式版本控制工具,git 是分布式版本控制工具\n2. svn 不支持离线提交,git 支持离线提交代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"3-Git-发展简史\"><a href=\"#3-Git-发展简史\" class=\"headerlink\" title=\"3. Git 发展简史\"></a>3. Git 发展简史</h1><p> 林纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds, 1969年~ ） </p>\n<p><img src=\"/../assets1/1571987252740.png\" alt=\"1571987252740\"></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过<strong>手工方式合并代码！</strong></p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？那个年代不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，<strong>而且必须联网才能使用</strong>。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是<strong>付费</strong>的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。而授权的前提是:Linux 社区的人不能开发具有相同功能的竞争产品! </p>\n<p>另一方面,BitKeeper不是开源的. 显然与Linux 的开源精神不相符,所以linux 社区的很多人抱怨,不愿意使用.</p>\n<p>典型的就是  Andrew Tridgell  (Samba 开发服务的创造者) 非常不满.偷偷违反了和 BitKeeper 的协议,反编译 BitKeeper 的源代码,开发了个爬虫,然后爬取信息被人发现了. BitKeeper 公司的领导非常不满意,然后开始发布消息说,(下个版本)不再为Linux 提供免费的服务. </p>\n<p>Linus  本人就出面协调(几周或者几个月),但是不管用, 没办法. 估计谈判的过程感觉到了憋屈–”吃人嘴短,拿人手软”</p>\n<p>Linus  本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！</p>\n<p> <img src=\"/../assets1/1571988966446.png\" alt=\"Linus 采访记录\"></p>\n<p>Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.</p>\n<p>直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具</p>\n<h1 id=\"4-Git-的安装\"><a href=\"#4-Git-的安装\" class=\"headerlink\" title=\"4. Git 的安装\"></a>4. Git 的安装</h1><h2 id=\"4-1-git-的下载\"><a href=\"#4-1-git-的下载\" class=\"headerlink\" title=\"4.1 git 的下载\"></a>4.1 git 的下载</h2><p>下载地址： <a href=\"https://git-scm.com/download\">https://git-scm.com/download</a></p>\n<p><img src=\"/../assets1/1571990833074.png\" alt=\"1571990833074\"></p>\n<p>附件</p>\n<p><img src=\"/../assets1/1571991253594.png\" alt=\"1571991253594\"></p>\n<hr/>\n## 4.2 安装\n\n<ol>\n<li><p>按照附件的 顺序直接下一步傻瓜式安装即可</p>\n</li>\n<li><p>其中安装的过程中需要填写一个邮箱和用户名(任意即可)</p>\n</li>\n</ol>\n<p><img src=\"/../assets1/1572001054551.png\" alt=\"1572001054551\"></p>\n<ol start=\"3\">\n<li><p>$\\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$ </p>\n</li>\n<li><p>更改语言</p>\n</li>\n</ol>\n<p><img src=\"/../assets1/1571992521110.png\" alt=\"1571992521110\"></p>\n<h1 id=\"5-Git-工作流程\"><a href=\"#5-Git-工作流程\" class=\"headerlink\" title=\"5. Git 工作流程\"></a>5. Git 工作流程</h1><h2 id=\"5-1-Git-初始化\"><a href=\"#5-1-Git-初始化\" class=\"headerlink\" title=\"5.1 Git 初始化\"></a>5.1 Git 初始化</h2><p>我们先初始化一个本地仓</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 新建测试文件夹\n2) 进入文件夹,然后右键创建版本库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1571993852280.png\" alt=\"1571993852280\"></p>\n<p>此时 我们看到 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 文件夹上多了一个绿色图标(如果没有请看本章节 5.3小节说明)\n2) 文件夹内部生成了一个.git 隐藏文件夹(需要设置隐藏文件夹可见)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-2-git-流程\"><a href=\"#5-2-git-流程\" class=\"headerlink\" title=\"5.2  git 流程\"></a>5.2  git 流程</h2><h3 id=\"5-2-1-流程图\"><a href=\"#5-2-1-流程图\" class=\"headerlink\" title=\"5.2.1 流程图\"></a>5.2.1 流程图</h3><p><img src=\"/../assets1/git%E6%B5%81%E7%A8%8B.png\"></p>\n<h3 id=\"5-2-2概念即详解\"><a href=\"#5-2-2概念即详解\" class=\"headerlink\" title=\"5.2.2概念即详解\"></a>5.2.2概念即详解</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)\t\t\n远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)\n工作区: 我们自己写代码(文档)的地方\n暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件\n------------\nClone：克隆，就是将远程仓库复制到本地仓库\nPush：推送，就是将本地仓库代码上传到远程仓库\nPull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png\"></p>\n<h1 id=\"6-Git-的基本使用01-TortoiseGit-操作本地仓库\"><a href=\"#6-Git-的基本使用01-TortoiseGit-操作本地仓库\" class=\"headerlink\" title=\"6.Git 的基本使用01-TortoiseGit 操作本地仓库\"></a>6.Git 的基本使用01-TortoiseGit 操作本地仓库</h1><h2 id=\"6-1-初始化仓库\"><a href=\"#6-1-初始化仓库\" class=\"headerlink\" title=\"6.1  初始化仓库\"></a>6.1  初始化仓库</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">方法一: \n新建一个文件夹,进入文件夹内部操作\n1)右键--&gt; 在这里创建Git 版本库 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572161580344.png\" alt=\"1572161580344\"></p>\n<p>  注意: 不要直接在桌面上操作,否则桌面就是一个仓库</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">方法二:\n2) 右键--&gt;Git GUI here<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572162906623.png\" alt=\"1572162906623\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">方法三: 命令行模式\n2) git init <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572163015102.png\" alt=\"1572163015102\"></p>\n<p>创建完毕仓库,我们发现,此时我们创建的文件夹下有一个.git 文件已经生成了</p>\n<p>并且仓库文件夹上多了一个 绿色图标</p>\n<p><img src=\"/../assets1/1572164583708.png\" alt=\"1572164583708\"></p>\n<h2 id=\"6-2-添加文件\"><a href=\"#6-2-添加文件\" class=\"headerlink\" title=\"6.2 添加文件\"></a>6.2 添加文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1)在仓库中新建一个文件\n2)选中新建的文件--&gt;右键--&gt; TortoiseGit--&gt; 添加\n3)此时我们看到文件夹上多了一个 &quot;加号&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572164475555.png\" alt=\"1572164475555\"></p>\n<p><img src=\"/../assets1/1572165109016.png\" alt=\"1572165109016\"></p>\n<h2 id=\"6-3-提交文件至本地仓库\"><a href=\"#6-3-提交文件至本地仓库\" class=\"headerlink\" title=\"6.3 提交文件至本地仓库\"></a>6.3 提交文件至本地仓库</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1)选中文件\n2) 右键--git提交<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572165471421.png\" alt=\"1572165471421\"></p>\n<h2 id=\"6-4-修改文件-与再次提交文件\"><a href=\"#6-4-修改文件-与再次提交文件\" class=\"headerlink\" title=\"6.4 修改文件,与再次提交文件\"></a>6.4 修改文件,与再次提交文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">当我们修改文件以后,文件上多了一个红色感叹号,表示我们上次提交后该文件被修改过\n提交后文件图标又变成绿色<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572165676716.png\" alt=\"1572165676716\"></p>\n<h2 id=\"6-5-文件状态讲解\"><a href=\"#6-5-文件状态讲解\" class=\"headerlink\" title=\"6.5 文件状态讲解\"></a>6.5 文件状态讲解</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">Git工作目录下的文件存在两种状态：\n1 untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个&quot;问号&quot;)\n2 tracked 已跟踪（被纳入版本控制）     \n    2.1 Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个&quot;加号&quot;)\n\t2.2 Unmodified 未修改状态        : 已提交(此时文件夹上有一个&quot;对号&quot;)\n\t2.3 Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个&quot;红色感叹号&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1569293793902.png\"></p>\n<p>这些文件的状态会随着我们执行Git的命令发生变化</p>\n<p><img src=\"/../assets1/1566627767390.png\"></p>\n<h2 id=\"6-6-修改文件-不提交和上一个版本比较差异-diff\"><a href=\"#6-6-修改文件-不提交和上一个版本比较差异-diff\" class=\"headerlink\" title=\"6.6 修改文件,不提交和上一个版本比较差异(diff)\"></a>6.6 修改文件,不提交和上一个版本比较差异(diff)</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">修改文件,此时不要提交\n选中文件--&gt;右键--&gt; TortoiseGit--&gt; 比较差异<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572167540734.png\" alt=\"1572167540734\"></p>\n<h2 id=\"6-7-查看提交历史记录\"><a href=\"#6-7-查看提交历史记录\" class=\"headerlink\" title=\"6.7 查看提交历史记录\"></a>6.7 查看提交历史记录</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">选中文件\n右键--&gt; TortoiseGit--&gt; 显示日志\n此时我们可以看到所有的历史提交记录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572167842481.png\" alt=\"1572167842481\"></p>\n<p>##6.8 回退至历史版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">右键--&gt; TortoiseGit--&gt; 显示日志\n选中某个版本--&gt; 进行如下操作<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572171034508.png\" alt=\"1572171034508\"></p>\n<h2 id=\"6-9-文件删除\"><a href=\"#6-9-文件删除\" class=\"headerlink\" title=\"6.9 文件删除\"></a>6.9 文件删除</h2><p>###6.9.1本地删除与恢复</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 直接选中文件删除的话,其实只是删除了本地工作区的文件,并没有删除 仓库中的文件\n   此时时可以回退的, 比如我们进行如下操作\n   1)文件删除\n   2)右键--&gt; TortoiseGit--&gt; 还原\n   此时我们发现文件又被恢复了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572169387835.png\" alt=\"1572169387835\"></p>\n<h3 id=\"6-9-2从版本库删除\"><a href=\"#6-9-2从版本库删除\" class=\"headerlink\" title=\"6.9.2从版本库删除\"></a>6.9.2从版本库删除</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">2) 我们如果真的想要将某个文件从服务器删除,需要进行如下操作\n   1) 删除文件,和上面的操作一样\n   2) 提交,此时服务文件已经删除了(历史版本还在,还是可以恢复)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-9-3从版本库删除-但是不删除本地\"><a href=\"#6-9-3从版本库删除-但是不删除本地\" class=\"headerlink\" title=\"6.9.3从版本库删除,但是不删除本地\"></a>6.9.3从版本库删除,但是不删除本地</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">我们可以如下操作,只删除服务器上的文件,但是本地文件并不删除\n备注: 删除之后需要提交,才会真正的从服务器删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"/../assets1/1572171572963.png\" alt=\"1572171572963\"></p>\n<h2 id=\"6-10-忽略提交\"><a href=\"#6-10-忽略提交\" class=\"headerlink\" title=\"6.10 忽略提交\"></a>6.10 忽略提交</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">有时候我们一些文件是不需要提交的比如说idea&#x2F;eclipse 开发的代码自动生成的配置文件\n如何配置不提交呢<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572172137494.png\" alt=\"1572172137494\"></p>\n<p>此时我们的根目录下会生成一个.gitignore 文件</p>\n<p>忽略文件如何阅读,常见格式</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 所有以.a 结尾的文件讲被忽略(递归)\n*.a\n# 不管其他规则怎样,强制不忽略  lib.a\n!lib.a\n# 只忽略 文件 TODO (注意这里是文件)\n&#x2F;TODO\n# 忽略 build文件夹下所有内容(递归) 这里是文件夹\nbuild&#x2F;\n# 忽略 doc 目录下以 *.txt 结尾的文件 (不递归)\ndoc&#x2F;*.txt\n# 忽略 doc 目录下以 *.pdf 结尾的文件 (递归)\ndoc&#x2F;**&#x2F;*.pdf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然理解了上述规则,我们也可以手动编辑该文件,而不用通过窗口化操作(如果不嫌麻烦)</p>\n<h1 id=\"7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支\"><a href=\"#7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支\" class=\"headerlink\" title=\"7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)\"></a>7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)</h1><h2 id=\"7-1-分支的概念\"><a href=\"#7-1-分支的概念\" class=\"headerlink\" title=\"7.1 分支的概念\"></a>7.1 分支的概念</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，避免影响开发主线。多线程开发,可以同时开启多个任务的开发,多个任务之间互不影响.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"7-2-为何要使用分支\"><a href=\"#7-2-为何要使用分支\" class=\"headerlink\" title=\"7.2 为何要使用分支\"></a>7.2 为何要使用分支</h2><p>先看单线程开发</p>\n<p><img src=\"/../assets1/1572173978185.png\" alt=\"1572173978185\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">思考如下现象\n    10.1 日 业务部门提出需求 : 明年 元旦3天做2个促销活动\n\t1) 12.31 号上线活动1, \n\t2) 1.4 号上线活动2 ,同时 要求撤销 活动1\n    你所在 部门领导 为了保证能顺利完成,要求 11.15 号完成 上述连个功能的开发工作\n此时作为开发人员:我要面临两个文件, 活动1 的代码,即要存在(12.31 要用)又要不存在(1.4 号要求删除) ,我们怎么做?\n显然比较棘手,如果使用分支(可以理解为将代码复制一份)将很好解决<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572174740013.png\" alt=\"1572174740013\"></p>\n<h2 id=\"7-3-创建分支\"><a href=\"#7-3-创建分支\" class=\"headerlink\" title=\"7.3 创建分支\"></a>7.3 创建分支</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">到现在为止,我们一直使用的时主分支(master)\n在主分支上操作创建分支<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572178189980.png\" alt=\"1572178189980\"></p>\n<h2 id=\"7-4-分支的查看切换\"><a href=\"#7-4-分支的查看切换\" class=\"headerlink\" title=\"7.4 分支的查看切换\"></a>7.4 分支的查看切换</h2><h3 id=\"7-4-1查看分支\"><a href=\"#7-4-1查看分支\" class=\"headerlink\" title=\"7.4.1查看分支\"></a>7.4.1查看分支</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">查看版本分支图,此时我们看到有两个分支\n当然,我们可以创建多个分支\n可以看到多个分支的图形<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572179420706.png\" alt=\"1572179420706\"></p>\n<h3 id=\"7-4-2切换分支\"><a href=\"#7-4-2切换分支\" class=\"headerlink\" title=\"7.4.2切换分支\"></a>7.4.2切换分支</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">右键--&gt; 检出<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"/../assets1/1572180057481.png\" alt=\"1572180057481\"></p>\n<p>##7.5 分支的合并与删除</p>\n<h3 id=\"7-5-1合并\"><a href=\"#7-5-1合并\" class=\"headerlink\" title=\"7.5.1合并\"></a>7.5.1合并</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">我们将代码切换到分支1,然后写属于需求1 的代码并提交\n当我们把需求1 开发完毕如何把需求1 的代码合并到主分支呢?\n--&gt;1 切换到 主版本\n--&gt;2 右键 合并即可将需求1 写的代码合并至主分支\n-----此时我们看到代码自动合并到了master分支<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572180623156.png\" alt=\"1572180623156\"></p>\n<h3 id=\"7-5-2删除分支\"><a href=\"#7-5-2删除分支\" class=\"headerlink\" title=\"7.5.2删除分支\"></a>7.5.2删除分支</h3><p><img src=\"/../assets1/1572183670465.png\" alt=\"1572183670465\"></p>\n<p>5,冲突的处理<br>​\t5.1)冲突的概念</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">现象演示\t\n\t开发人员A 开发需求1,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int [] args)\n 同时开发人员B 开发需求2,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int a int b)\n他们在互相不知道对方需求的情况下同时提交了代码到自己的分支\n   思考此时如果我们把需求1 和需求2 同时都合并到主分支上, 主分支的 工具类 MathUtil 的第一行应该使用谁的代码? \n   此时主分支是不能智能判断第一行使用谁的代码,合并时会报错,我们叫做冲突.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572181403239.png\" alt=\"1572181403239\"></p>\n<p>​\t5.2) 如何处理冲突</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">分析一下冲突的原因:\n\t开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码,合并是冲突\n思考:\n\t我们能直接把某个开发人员开发的代码删除吗?\n显然不能\n\t所以在处理冲突时,第一步应该时找开发另一个需求的人员沟通,之后才是处理冲突\n-----\n--&gt; 选中冲突的文件(带黄色感叹号的文件都是冲突的文件,如果有多个需要逐一处理)\n--&gt; 右键--&gt; 编辑冲突,\n--&gt;处理完毕后.标记已解决<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572182565594.png\" alt=\"1572182565594\"></p>\n<p><img src=\"/../assets1/1572182727568.png\" alt=\"1572182727568\"></p>\n<h1 id=\"8-tag-标签\"><a href=\"#8-tag-标签\" class=\"headerlink\" title=\"8.tag  标签\"></a>8.tag  标签</h1><h2 id=\"8-1-标签的概念\"><a href=\"#8-1-标签的概念\" class=\"headerlink\" title=\"8.1 标签的概念\"></a>8.1 标签的概念</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag)\n比如说，我们想为我们的项目发布一个&quot;1.0&quot;版本。 我们给最新一次提交打上（HEAD）&quot;v1.0&quot;的标签。\n标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-2-标签的创建-tag\"><a href=\"#8-2-标签的创建-tag\" class=\"headerlink\" title=\"8.2  标签的创建(tag)\"></a>8.2  标签的创建(tag)</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">标签的创建和分支的创建操作几乎一样<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572183849972.png\" alt=\"1572183849972\"></p>\n<h2 id=\"8-3-标签的切换与删除\"><a href=\"#8-3-标签的切换与删除\" class=\"headerlink\" title=\"8.3 标签的切换与删除\"></a>8.3 标签的切换与删除</h2><p><img src=\"/../assets1/1572184030612.png\" alt=\"1572184030612\"></p>\n<p><img src=\"/../assets1/1572184109746.png\" alt=\"1572184109746\"></p>\n<h1 id=\"9-远程仓库\"><a href=\"#9-远程仓库\" class=\"headerlink\" title=\"9. 远程仓库\"></a>9. 远程仓库</h1><p>我们的代码不能总是放在本地,因为总是放在本地,一旦电脑出现故障,数据将丢失,怎么共享呢,这里我们需要一个服务器, 我们可以把代码放到服务器上,然后让别人下载,这样我峨嵋你既可以备份代码,也可以进行团队协作开发</p>\n<h2 id=\"9-0-局域网仓库\"><a href=\"#9-0-局域网仓库\" class=\"headerlink\" title=\"9.0 局域网仓库\"></a>9.0 局域网仓库</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">实际上我们可以搭建一个单间的局域网服务器共享我们的代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"9-0-1本地相对路径-多个文件夹之间共享代码\"><a href=\"#9-0-1本地相对路径-多个文件夹之间共享代码\" class=\"headerlink\" title=\"9.0.1本地相对路径,多个文件夹之间共享代码\"></a>9.0.1本地相对路径,多个文件夹之间共享代码</h3><p><img src=\"/../assets1/1572535798760.png\" alt=\"1572535798760\"></p>\n<h3 id=\"9-0-2开启局域网共享代码\"><a href=\"#9-0-2开启局域网共享代码\" class=\"headerlink\" title=\"9.0.2开启局域网共享代码\"></a>9.0.2开启局域网共享代码</h3><p><img src=\"/../assets1/1572535921581.png\" alt=\"1572535921581\"></p>\n<p><img src=\"/../assets1/1572536029899.png\" alt=\"1572536029899\"></p>\n<p>局域网这种共享是没有安全控制的,都可以访问,如果想要搭建一个可以控制权限的服务器需要借助第三方软件</p>\n<p>gitblit,可以自行搜索搭建</p>\n<h2 id=\"9-1-常用远程仓库托管服务\"><a href=\"#9-1-常用远程仓库托管服务\" class=\"headerlink\" title=\"9.1 常用远程仓库托管服务\"></a>9.1 常用远程仓库托管服务</h2><p>除了自己搭建服务器,其实我们可以使用一些免费的远程仓库,远程仓库有很多,常见的免费互联网远程仓库托管服务如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">www.github.com\nwww.gitee.com\nwww.gitlab.com\n\ngithub  是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。\ngitee    即码云，是 oschina 免费给企业用的，不用自己搭建环境。\ngitlab   类似 github，一般用于在企业内搭建git私服，要自己搭环境。\n\nGitHub(gitee)、GitLab 不同点：\n1、GitHub如果使用私有仓库是需要付费的，(2019年开始私有仓库也是免费的但是只能3个人协同开发,想要更多需要收费)，GitLab可以在上面搭建私人的免费仓库。\n2、GitLab让开发团队对他们的代码仓库拥有更多的控制，相对于GitHub，它有不少的特色：\n    (1)允许免费设置仓库权限\n    (2)允许用户选择分享一个project的部分代码\n    (3)允许用户设置project的获取权限，进一步提升安全性\n    (4)可以设置获取到团队整体的改进进度\n    (5)通过innersourcing让不在权限范围内的人访问不到该资源\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>鉴于国内用户可能网络不好,这里我们使用gitee(码云) 来讲解我们的课程,其他可自行找资料学习非常类似</p>\n<h2 id=\"9-2-码云账号注册\"><a href=\"#9-2-码云账号注册\" class=\"headerlink\" title=\"9.2  码云账号注册\"></a>9.2  码云账号注册</h2><p><img src=\"/../assets1/1572267659865.png\" alt=\"1572267659865\"></p>\n<p>填写邮箱发送验证码,然后可以注册账号,主页如下</p>\n<p><img src=\"/../assets1/1572268091948.png\" alt=\"1572268091948\"></p>\n<h2 id=\"9-3-创建远程仓库\"><a href=\"#9-3-创建远程仓库\" class=\"headerlink\" title=\"9.3 创建远程仓库\"></a>9.3 创建远程仓库</h2><p><img src=\"/../assets1/1572274044100.png\" alt=\"1572274044100\"></p>\n<p><img src=\"/../assets1/224637.png\"></p>\n<p>各个类型仓库之间的区别</p>\n<p><img src=\"/../assets1/1572274100802.png\" alt=\"1572274100802\"></p>\n<p><img src=\"/../assets1/1572274406371.png\" alt=\"1572274406371\"></p>\n<h2 id=\"9-4-把本地代码推送到远端\"><a href=\"#9-4-把本地代码推送到远端\" class=\"headerlink\" title=\"9.4  把本地代码推送到远端\"></a>9.4  把本地代码推送到远端</h2><p><img src=\"/../assets1/1572275202869.png\" alt=\"1572275202869\"></p>\n<p><img src=\"/../assets1/1572275492670.png\" alt=\"1572275492670\"></p>\n<p><img src=\"/../assets1/1572275546739.png\" alt=\"1572275546739\"></p>\n<p>此时我们刷新仓库发现代码已经存在了</p>\n<p>我们填写的用户信息,会被保存在本地,下次提交无需填写用户名和密码</p>\n<p><img src=\"/../assets1/1572277483698.png\" alt=\"1572277483698\"></p>\n<h2 id=\"9-5-从远程仓库克隆代码\"><a href=\"#9-5-从远程仓库克隆代码\" class=\"headerlink\" title=\"9.5  从远程仓库克隆代码\"></a>9.5  从远程仓库克隆代码</h2><p>我们同样可以从库下载代码,</p>\n<p>新建一个文件夹 repo2 ,进入然后进行如下操作</p>\n<p><img src=\"/../assets1/1572275958701.png\" alt=\"1572275958701\"></p>\n<p>此时我们发现我们的代码已经被下载下来了</p>\n<h2 id=\"9-6-代码的修改与提交-查看历史\"><a href=\"#9-6-代码的修改与提交-查看历史\" class=\"headerlink\" title=\"9.6  代码的修改与提交,查看历史\"></a>9.6  代码的修改与提交,查看历史</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1)此时我们修改代码就不能仅仅是提交到本地了,提交完毕应该推送到远端服务器\n2)此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的\n   git --&gt;显示日志<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572277139243.png\" alt=\"1572277139243\"></p>\n<h2 id=\"9-7-ssh-连接概述\"><a href=\"#9-7-ssh-连接概述\" class=\"headerlink\" title=\"9.7 ssh 连接概述\"></a>9.7 ssh 连接概述</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh 方式配置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> ssh 方式的底层原理</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式\n数学基础好的同学可以研究一下\nhttps:&#x2F;&#x2F;www.cnblogs.com&#x2F;cjm123&#x2F;p&#x2F;8243424.html\n\n公钥私钥加密可以看作古代 的&quot;虎符&quot; , 我们本地电脑有一份,远程服务器有一份, 只要 &quot;虎符&quot; 核对通过 表示身份无误,可以执行提交等操作,无需输入用户名密码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-8-ssh-密钥的生成\"><a href=\"#9-8-ssh-密钥的生成\" class=\"headerlink\" title=\"9.8 ssh 密钥的生成\"></a>9.8 ssh 密钥的生成</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#生成公钥私钥\n ssh-keygen -t rsa\n 一直回车即可\n 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572520139221.png\" alt=\"1572520139221\"></p>\n<p><img src=\"/../assets1/1572520293700.png\" alt=\"1572520293700\"></p>\n<h2 id=\"9-9-ssh-密钥配置\"><a href=\"#9-9-ssh-密钥配置\" class=\"headerlink\" title=\"9.9 ssh 密钥配置\"></a>9.9 ssh 密钥配置</h2><p><img src=\"/../assets1/1572520396806.png\" alt=\"1572520396806\"></p>\n<h2 id=\"9-10-ssh-方式克隆-x2F-提交代码\"><a href=\"#9-10-ssh-方式克隆-x2F-提交代码\" class=\"headerlink\" title=\"9.10 ssh 方式克隆&#x2F;提交代码:\"></a>9.10 ssh 方式克隆&#x2F;提交代码:</h2><p>  配置完成之后我们克隆我们之前的项目</p>\n<p><img src=\"/../assets1/1572522118610.png\" alt=\"1572522118610\"></p>\n<p>修改后直接提交推送即可成功,,git 会自动去.ssh 目录找我们的私钥进行匹配</p>\n<h2 id=\"9-11-远程仓库的其他操作\"><a href=\"#9-11-远程仓库的其他操作\" class=\"headerlink\" title=\"9.11. 远程仓库的其他操作\"></a>9.11. 远程仓库的其他操作</h2><p>概念</p>\n<p><img src=\"/../assets1/1572522822946.png\" alt=\"1572522822946\"></p>\n<p>当我们从 gitee 上查看别人的项目的时候我们可能会看到上图中的按钮</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">指数:\n\t是gitee 网站根据当前项目的各项指标计算出来的一个值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572523045267.png\" alt=\"1572523045267\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Star:\n\t点赞, 注意这里的并不像朋友圈那样容易获得点赞,圈内人还是很克制的\nWatch:\n   如果你watch 了某个开源项目,那么这个项目后续所有的改动你将收到通知\nFork :\n\t将别人的代码克隆到你自己的仓库\n\t作用一: 如果担心某个优秀的项目别人突然有一天不开源了,你可以fork到自己的仓库\n    作用二: 修改别人的代码\n\t  以linux 为例,你其实不是linux 社区的开发人员,但是你 又想为linux 开发做贡献(维护代码)\n\t   你并没有权限,怎们办?\n\t   你可以先把linux 开源的代码 fork 到你自己的仓库,此时你就可以操作自己的仓库进行修改代码了\n\t   如何让别人合并你修改好的代码呢? \n\t    我们注意项目的上方有一个 &quot; Pull Request&quot; 这个按钮的意思是 &quot;请求求别人合并你修改的代码&quot;\n\t    当我们发起一个 Pull Request 时 , 项目的拥有者将收到 Pull Request请求,然后将根据你提交代码的质量决定是否合并<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>项目操作</p>\n<p>1)我们可以删除修改我们自己仓库的基本信息</p>\n<ol start=\"2\">\n<li>我们可以邀请其他人成为项目的开发人员或者管理人员</li>\n</ol>\n<p><img src=\"/../assets1/1572523819666.png\" alt=\"1572523819666\"></p>\n<p>我们可以删除修改我们自己仓库的基本信息</p>\n<p><img src=\"/../assets1/1572523928774.png\" alt=\"1572523928774\"></p>\n<p><img src=\"/../assets1/1572523968992.png\" alt=\"1572523968992\"></p>\n<h2 id=\"9-12-利用-gitee-搭建个人主页\"><a href=\"#9-12-利用-gitee-搭建个人主页\" class=\"headerlink\" title=\"9.12 利用 gitee 搭建个人主页\"></a>9.12 利用 gitee 搭建个人主页</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1)将静态资源上传至仓库\n2) 选择服务 pages 即可部署\n注意 1)必须有个index.html 文件\n注意 2) 只能搭建静态网站,动态网站请租赁服务器搭建提供服务\n注意 3) gitee 要求必须绑定手机号\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets1/1572525575923.png\" alt=\"1572525575923\"></p>\n<p>点击开启后gitee 会自动生成一个域名</p>\n<p><img src=\"/../assets1/1572526097257.png\" alt=\"1572526097257\"></p>\n<p>直接访问即可</p>\n<p>此时我们已经在git 上部署了一个静态的网站</p>\n<p><img src=\"/../assets1/1572526136074.png\" alt=\"1572526136074\"></p>\n<h1 id=\"10-命令行–-git基本操作\"><a href=\"#10-命令行–-git基本操作\" class=\"headerlink\" title=\"10.命令行– git基本操作\"></a>10.命令行– git基本操作</h1><h2 id=\"10-1-介绍\"><a href=\"#10-1-介绍\" class=\"headerlink\" title=\"10.1  介绍\"></a>10.1  介绍</h2><p>​\t上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p>\n<p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p>\n<p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p>\n<p>##10.2 环境配置</p>\n<p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#设置用户信息 \n   git config --global user.name “itcast”\n   git config --global user.email “itcast@itcast.cn”\n#查看配置信息\n   git config --list\n   git config user.name\n#通过上面的命令设置的信息会保存在~&#x2F;.gitconfig文件中\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>##10.3  初始化本地仓库 init</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 初始化仓库带工作区\ngit init\n# 如果执行失败(针对github) 可执行一下两个\ngit clone https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-starter.git .&#x2F;\ncnpm install\n# 初始化仓库不带工作区\ngit init --bare  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>##10.4 克隆 clone</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 从远程仓库克隆\ngit clone 远程Git仓库地址 \n例如: git clone https:&#x2F;&#x2F;gitee.com&#x2F;itcast&#x2F;gittest.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>##10.5  查看状态 status</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看状态\ngit status \n#查看状态 使输出信息更加简洁\ngit status –s <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>##10.6 add </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将未跟踪的文件加入暂存区\ngit add  &lt;文件名&gt;  \n# 将暂存区的文件取消暂存 (取消 add )\ngit reset  &lt;文件名&gt;  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>##10.7 commit</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># git commit 将暂存区的文件修改提交到本地仓库\ngit commit -m &quot;日志信息&quot;  &lt;文件名&gt;  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>##10.8 删除 rm</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 从本地工作区 删除文件\ngit rm &lt;文件名&gt;  \n# 如果本工作区库误删, 想要回退\ngit checkout head &lt;文件名&gt;  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"11-命令行–git-远程仓库操作\"><a href=\"#11-命令行–git-远程仓库操作\" class=\"headerlink\" title=\"11. 命令行–git 远程仓库操作\"></a>11. 命令行–git 远程仓库操作</h1><h2 id=\"11-1-查看远程\"><a href=\"#11-1-查看远程\" class=\"headerlink\" title=\"11.1    查看远程\"></a>11.1    查看远程</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看远程  列出指定的每一个远程服务器的简写\ngit remote \n# 查看远程 , 列出 简称和地址\ngit remote  -v  \n# 查看远程仓库详细地址\ngit remote show  &lt;仓库简称&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-2-添加-x2F-移除远测仓库\"><a href=\"#11-2-添加-x2F-移除远测仓库\" class=\"headerlink\" title=\"11.2 添加&#x2F;移除远测仓库\"></a>11.2 添加&#x2F;移除远测仓库</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 添加远程仓库\ngit remote add &lt;shortname&gt; &lt;url&gt;\n# 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)\ngit remote rm &lt;shortname&gt; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-3-从远程仓库获取代码\"><a href=\"#11-3-从远程仓库获取代码\" class=\"headerlink\" title=\"11.3 从远程仓库获取代码\"></a>11.3 从远程仓库获取代码</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 从远程仓库克隆\ngit clone &lt;url&gt; \n# 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)\ngit fetch  &lt;shortname&gt;  &lt;分支名称&gt;\n# 手动合并  把某个版本的某个分支合并到当前工作区\ngit merge &lt;shortname&gt;&#x2F;&lt;分支名称&gt;\n# 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) &#x3D; fetch+merge\ngit pull  &lt;shortname&gt;  &lt;分支名称&gt;\ngit pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将本地仓库推送至远程仓库的某个分支\ngit push [remote-name] [branch-name]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"12-命令行–-分支\"><a href=\"#12-命令行–-分支\" class=\"headerlink\" title=\"12.  命令行– 分支\"></a>12.  命令行– 分支</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 默认 分支名称为 master\n# 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 列出所有本地分支和远程分支\ngit branch -a\n# 创建分支\ngit branch &lt;分支名&gt;\n# 切换分支 \ngit checkout &lt;分支名&gt;\n# 删除分支(如果分支已经修改过,则不允许删除)\ngit branch -d  &lt;分支名&gt;\n# 强制删除分支\ngit branch -D  &lt;分支名&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 提交分支至远程仓库\ngit push &lt;仓库简称&gt; &lt;分支名称&gt;\t\n# 合并分支 将其他分支合并至当前工作区\ngit merge &lt;分支名称&gt;\n# 删除远程仓库分支\ngit push origin –d branchName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"13-命令行-–tag\"><a href=\"#13-命令行-–tag\" class=\"headerlink\" title=\"13 . 命令行 –tag\"></a>13 . 命令行 –tag</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 列出所有tag\ngit tag\n# 查看tag详细信息 \ngit show [tagName]\n# 新建一个tag\ngit tag [tagName]\n# 提交指定tag\n$ git push [仓库简称] [tagName]\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n# 删除本地tag\n$ git tag -d [tag]\n# 删除远程tag (注意 空格)\n$ git push origin :refs&#x2F;tags&#x2F;[tag]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"14-案例\"><a href=\"#14-案例\" class=\"headerlink\" title=\"14. 案例\"></a>14. 案例</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">企业中我们是如何开发的\n1) 入职第一天,管理人员分配&#x2F;git账号密码 \n2) 开发人员下载代码即文档&#x2F; 根据文档将环境搭建成功\n3) 团队一般会给你讲讲项目相关的支持\n----\n4) 你接到第一个需求(或者某个功能,一般要经过沟通,分析,设计...等过程)\n5) 创建feature分支(一般一个需求对应一个feature,命名格式上标注该需求的id)\n6) 开发需求,本地测试,提交代码到当前需求对应的feature分支,\n\t一般来讲为了避免将测试代码提交,需要提交前,检查如下步骤\n\t6.1) 是否多提交了某个文件,比如测试文件\n\t6.2) 是否漏提交文件\n\t6.3) 打开每一个应该提交的文件,判断是否多提交了一行代码,是否少提交了一行代码,是否删除了本应该存在的代码 \n\t检查完毕提交代码\n7) 合并分支至test分支-- 测试人员会在test分支中测试\n8) 测试人员测试bug ,开发者在feature分支上继续修改,提交\n9) 测试人员测试通过 ,test分支会被测试人员合并到develop开发分支,再次测试\n10)develop分支最终会被合并到master主分支\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<p>&#96;</p>\n","text":" # git 教程 [TOC] 1.版本管理工具概念碰到过如下的现象 &lt;&lt;毕业论文第一版.doc&gt;&gt; &lt;&lt;毕业论文第二版.doc&gt;&gt; &lt;&lt;毕业论文第三版.doc&gt;&gt; &lt;&lt;毕业论文最终版.doc&g...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git教程","slug":"Git教程","count":1,"path":"api/tags/Git教程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.版本管理工具概念</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">2. 版本管理工具介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91\"><span class=\"toc-text\">2.1版本管理发展简史(维基百科)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-SVN-SubVersion\"><span class=\"toc-text\">2.1.1 SVN(SubVersion)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-2-Git\"><span class=\"toc-text\">2.1.2 Git</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Git-%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2\"><span class=\"toc-text\">3. Git 发展简史</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-Git-%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">4. Git 的安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-git-%E7%9A%84%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">4.1 git 的下载</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-Git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">5. Git 工作流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-Git-%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">5.1 Git 初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-git-%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">5.2  git 流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">5.2.1 流程图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2%E6%A6%82%E5%BF%B5%E5%8D%B3%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">5.2.2概念即详解</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A801-TortoiseGit-%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">6.Git 的基本使用01-TortoiseGit 操作本地仓库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">6.1  初始化仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">6.2 添加文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-3-%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E8%87%B3%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">6.3 提交文件至本地仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-4-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6-%E4%B8%8E%E5%86%8D%E6%AC%A1%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">6.4 修改文件,与再次提交文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-5-%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">6.5 文件状态讲解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-6-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6-%E4%B8%8D%E6%8F%90%E4%BA%A4%E5%92%8C%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%89%88%E6%9C%AC%E6%AF%94%E8%BE%83%E5%B7%AE%E5%BC%82-diff\"><span class=\"toc-text\">6.6 修改文件,不提交和上一个版本比较差异(diff)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-7-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">6.7 查看提交历史记录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-9-%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">6.9 文件删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-9-2%E4%BB%8E%E7%89%88%E6%9C%AC%E5%BA%93%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">6.9.2从版本库删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-9-3%E4%BB%8E%E7%89%88%E6%9C%AC%E5%BA%93%E5%88%A0%E9%99%A4-%E4%BD%86%E6%98%AF%E4%B8%8D%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0\"><span class=\"toc-text\">6.9.3从版本库删除,但是不删除本地</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-10-%E5%BF%BD%E7%95%A5%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">6.10 忽略提交</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A802-TortoiseGit-%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-%E5%88%86%E6%94%AF%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">7.1 分支的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-%E4%B8%BA%E4%BD%95%E8%A6%81%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7.2 为何要使用分支</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7.3 创建分支</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-4-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%A5%E7%9C%8B%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">7.4 分支的查看切换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-1%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7.4.1查看分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-2%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7.4.2切换分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-1%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">7.5.1合并</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-2%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF\"><span class=\"toc-text\">7.5.2删除分支</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-tag-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">8.tag  标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E6%A0%87%E7%AD%BE%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">8.1 标签的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-%E6%A0%87%E7%AD%BE%E7%9A%84%E5%88%9B%E5%BB%BA-tag\"><span class=\"toc-text\">8.2  标签的创建(tag)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-%E6%A0%87%E7%AD%BE%E7%9A%84%E5%88%87%E6%8D%A2%E4%B8%8E%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">8.3 标签的切换与删除</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">9. 远程仓库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-0-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">9.0 局域网仓库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-0-1%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84-%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">9.0.1本地相对路径,多个文件夹之间共享代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-0-2%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">9.0.2开启局域网共享代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E5%B8%B8%E7%94%A8%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">9.1 常用远程仓库托管服务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E7%A0%81%E4%BA%91%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">9.2  码云账号注册</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">9.3 创建远程仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-4-%E6%8A%8A%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%AB%AF\"><span class=\"toc-text\">9.4  把本地代码推送到远端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-5-%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%85%8B%E9%9A%86%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">9.5  从远程仓库克隆代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-6-%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BF%AE%E6%94%B9%E4%B8%8E%E6%8F%90%E4%BA%A4-%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">9.6  代码的修改与提交,查看历史</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-7-ssh-%E8%BF%9E%E6%8E%A5%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">9.7 ssh 连接概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-8-ssh-%E5%AF%86%E9%92%A5%E7%9A%84%E7%94%9F%E6%88%90\"><span class=\"toc-text\">9.8 ssh 密钥的生成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-9-ssh-%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">9.9 ssh 密钥配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-10-ssh-%E6%96%B9%E5%BC%8F%E5%85%8B%E9%9A%86-x2F-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">9.10 ssh 方式克隆&#x2F;提交代码:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-11-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">9.11. 远程仓库的其他操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-12-%E5%88%A9%E7%94%A8-gitee-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5\"><span class=\"toc-text\">9.12 利用 gitee 搭建个人主页</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-%E5%91%BD%E4%BB%A4%E8%A1%8C%E2%80%93-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">10.命令行– git基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">10.1  介绍</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E5%91%BD%E4%BB%A4%E8%A1%8C%E2%80%93git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">11. 命令行–git 远程仓库操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-1-%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B\"><span class=\"toc-text\">11.1    查看远程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-2-%E6%B7%BB%E5%8A%A0-x2F-%E7%A7%BB%E9%99%A4%E8%BF%9C%E6%B5%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">11.2 添加&#x2F;移除远测仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-3-%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">11.3 从远程仓库获取代码</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E5%91%BD%E4%BB%A4%E8%A1%8C%E2%80%93-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">12.  命令行– 分支</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#13-%E5%91%BD%E4%BB%A4%E8%A1%8C-%E2%80%93tag\"><span class=\"toc-text\">13 . 命令行 –tag</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#14-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">14. 案例</span></a></li></ol>","author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}},"mapped":true,"prev_post":{"title":"Python爬虫","uid":"33e145189cb2c9be32b78fb749fd41d4","slug":"python爬虫","date":"2022-12-10T10:09:28.936Z","updated":"2022-12-22T02:00:43.678Z","comments":true,"path":"api/articles/python爬虫.json","keywords":null,"cover":"/img/a0.webp","text":"import requests from bs4 import BeautifulSoup import re import json from tqdm import tqdm class CoronaVirusSpider(object): def __init__(self...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"Python爬虫","slug":"Python爬虫","count":1,"path":"api/tags/Python爬虫.json"}],"author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}}},"next_post":{"title":"Mysql笔记","uid":"01997d5dc8999c6dc19f4a1759fa3505","slug":"Mysql笔记","date":"2022-12-05T15:19:00.982Z","updated":"2022-12-13T15:00:14.315Z","comments":true,"path":"api/articles/Mysql笔记.json","keywords":null,"cover":"/img/a10.webp","text":" 未来记Mysql笔记的地方 ","link":"","photos":[],"count_time":{"symbolsCount":16,"symbolsTime":"1 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":2,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql笔记","slug":"Mysql笔记","count":1,"path":"api/tags/Mysql笔记.json"}],"author":{"name":"Areay7","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zzvips.com%2Fuploads%2Fallimg%2F191218%2F195P21256-2.jpg&refer=http%3A%2F%2Fwww.zzvips.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1673538751&t=9263c8ac08a7a543e35c1027fbd1af56","link":"/","description":"<br>其实都是百炼成钢","socials":{"github":"https://github.com/Areay7","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/364522014?spm_id_from=333.337.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/areay7"},"mail":{"icon":"/svg/mail.svg","link":"mailto:2507549477@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://user.qzone.qq.com/2507549477/main"}}}}}}